[Code]
const
 BS_MULTILINE = $2000;
var
 ToolbarPage: TWizardPage;

function SetWindowLong(hWnd: hwnd; nIndex: Integer; dNewLong: longint): longint;
external 'SetWindowLongA@user32.dll stdcall';
function GetWindowLong2(hWnd: longint; dwNewLong: longint): longint;
external 'GetWindowLongA@user32.dll stdcall';

var
    chkUseYahoo, chkInstallToolbar: TCheckBox;
	UseYahoo: Boolean;
	SetupApplication: string;

procedure onclick_lblPrivacyPolicyHyperlink(Sender: TObject);
var ErrorCode: Integer;
begin
 ShellExec('open', 'http://pdfforge.mybrowserbar.com/privacy.html', '', '', SW_SHOW, ewNoWait, ErrorCode)
end;
procedure onclick_lblTermsOfUseHyperlink(Sender: TObject);
var ErrorCode: Integer;
begin
 ShellExec('open', 'http://pdfforge.mybrowserbar.com/terms.html', '', '', SW_SHOW, ewNoWait, ErrorCode)
end;
procedure onclick_lblHelpHyperlink(Sender: TObject);
var ErrorCode: Integer;
begin
 ShellExec('open', 'http://pdfforge.mybrowserbar.com/help.html', '', '', SW_SHOW, ewNoWait, ErrorCode)
end;

procedure onclick_chkInstallToolbar(Sender: TObject);
begin
 if chkInstallToolbar.Checked = false then begin
  UseYahoo := chkUseYahoo.Checked;
  chkUseYahoo.Checked := false;
  chkUseYahoo.Enabled := false;
  if SetupApplication = 'Toolbar' then 
    WizardForm.NextButton.Enabled := False;
 end else begin
  chkUseYahoo.Checked := UseYahoo;
  chkUseYahoo.Enabled := true;
  if WizardForm.NextButton.Enabled = False then 
   WizardForm.NextButton.Enabled := true;
 end; 
end;

function ToolbarForm_CreatePage(PreviousPageId: Integer): TWizardPage;
var
 Page: TWizardPage;
 lblToolbarFeature1: TLabel;
 lblToolbarFeature2: TLabel;
 lblToolbarFeature3: TLabel;
 lblToolbarFeature4: TLabel;
 yoffs1 : LongInt;
 imgToolbar: TBitmapImage;
 lblToolbarNote: TLabel;
 lblTermsOfUseHyperlink: TLabel;
 lblPrivacyPolicyHyperlink: TLabel;
 lblHelpHyperlink: TLabel;
begin
 Page := CreateCustomPage(PreviousPageId, ExpandConstant('{cm:ToolbarCaption}'), ExpandConstant('{cm:ToolbarFormDescription}') );
 yoffs1 := 0;
 imgToolbar := TBitmapImage.Create(Page);
 with imgToolbar do
 begin
  Parent := Page.Surface;
  ExtractTemporaryFile('Toolbar.bmp');
  Bitmap.LoadFromFile(ExpandConstant('{tmp}')+'\Toolbar.bmp');
  Left := ScaleX(0);
  Top := ScaleY(yoffs1);
  Width := ScaleX(300);
  Height := ScaleY(25);
  AutoSize := True;
 end;
 lblToolbarFeature1 := TLabel.Create(Page);
 with lblToolbarFeature1 do
 begin
  Parent := Page.Surface;
  Left := ScaleX(0);
  Top := ScaleY(yoffs1 + 30);
  Width := ScaleX(100);
  Height := ScaleY(15);
  Caption := ExpandConstant('{cm:ToolbarFeature1}');
 end;
 lblToolbarFeature2 := TLabel.Create(Page);
 with lblToolbarFeature2 do
 begin
  Parent := Page.Surface;
  Left := ScaleX(0);
  Top := ScaleY(yoffs1 + 50);
  Width := ScaleX(100);
  Height := ScaleY(15);
  Font.Style := [fsBold];
  Caption := ' • ' + ExpandConstant('{cm:ToolbarFeature2}');
 end;
 lblToolbarFeature3 := TLabel.Create(Page);
 with lblToolbarFeature3 do
 begin
  Parent := Page.Surface;
  Left := ScaleX(0);
  Top := ScaleY(yoffs1 + 65);
  Width := ScaleX(100);
  Height := ScaleY(15);
  Font.Style := [fsBold];
  Caption := ' • ' + ExpandConstant('{cm:ToolbarFeature3}');
 end;
 lblToolbarFeature4 := TLabel.Create(Page);
 with lblToolbarFeature4 do
 begin
  Parent := Page.Surface;
  Left := ScaleX(0);
  Top := ScaleY(yoffs1 + 85);
  Width := ScaleX(0);
  Height := ScaleY(15);
  Caption := ExpandConstant('{cm:ToolbarFeature4}');
 end;

 chkInstallToolbar := TCheckBox.Create(Page);
 with chkInstallToolbar do
 begin
  Parent := Page.Surface;
  Caption := ExpandConstant('{cm:ToolbarInstallToolbar}');
  Left := ScaleX(0);
  Top := ScaleY(yoffs1 + 100);
  Width := ScaleX(418);
  Height := ScaleY(35);
  Checked := True;
  State := cbChecked;
  Onclick := @onclick_chkInstallToolbar;
 end;
 SetWindowLong(chkInstallToolbar.Handle, -16, GetWindowLong2(chkInstallToolbar.Handle, -16) or BS_MULTILINE);

 chkUseYahoo := TCheckBox.Create(Page);
 with chkUseYahoo do
 begin
  Parent := Page.Surface;
  Caption := ExpandConstant('{cm:ToolbarUseYahoo}');
  Left := ScaleX(0);
  Top := ScaleY(yoffs1 + 130);
  Width := ScaleX(418);
  Checked := True;
  State := cbChecked;
  Height := ScaleY(35);
 end;
 SetWindowLong(chkUseYahoo.Handle, -16, GetWindowLong2(chkUseYahoo.Handle, -16) or BS_MULTILINE);

 lblToolbarNote := TLabel.Create(Page);
 with lblToolbarNote do
 begin
  Parent := Page.Surface;
  AutoSize := False;
  Left := ScaleX(0);
  Top := ScaleY(yoffs1 + 164);
  Width := ScaleX(418);
  Height := ScaleY(55);
  Font.Size := 7;
  WordWrap := True;
  Caption := ExpandConstant('{cm:ToolbarNote}');
 end;
 
 lblTermsOfUseHyperlink := TLabel.Create(Page);
 with lblTermsOfUseHyperlink do
 begin
  Parent := Page.Surface;
  Left := ScaleX(0);
  Top := ScaleY(yoffs1 + 224);
  Width := ScaleX(180);
  Height := ScaleY(13);
  Font.Color := 16711680;
  Font.Style := [fsUnderline];
  Caption := ExpandConstant('{cm:ToolbarTermsOfUse}');
  Cursor := crHand;
  Onclick := @onclick_lblTermsOfUseHyperlink;
 end;

 lblHelpHyperlink := TLabel.Create(Page);
 with lblHelpHyperlink do
 begin
  Parent := Page.Surface;
  Alignment := taRightJustify;
  Top := ScaleY(yoffs1 + 224);
  Height := ScaleY(13);
  Font.Color := 16711680;
  Font.Style := [fsUnderline];
  Caption := ExpandConstant('{cm:ToolbarHelp}');
  AutoSize := true;
  Left := Page.Surface.Width - Width;
  Cursor := crHand;
  Onclick := @onclick_lblHelpHyperlink;
 end;

 lblPrivacyPolicyHyperlink := TLabel.Create(Page);
 with lblPrivacyPolicyHyperlink do
 begin
  Parent := Page.Surface;
  Alignment := taCenter;
  Top := ScaleY(yoffs1 + 224);
  Height := ScaleY(13);
  Font.Color := 16711680;
  Font.Style := [fsUnderline];
  Caption := ExpandConstant('{cm:ToolbarPrivacyPolicy}');
  AutoSize := true;
  Left := lblTermsOfUseHyperlink.Width + (Page.Surface.Width - lblTermsOfUseHyperlink.Width - lblHelpHyperlink.Width - lblPrivacyPolicyHyperlink.Width) / 2;
  Cursor := crHand;
  Onclick := @onclick_lblPrivacyPolicyHyperlink;
 end; 
 Result := Page;
end;

function CountOfFiles(path, extension: string; recursiv, NotAll: boolean): LongInt; // Sample: CountOfFiles('C:\Windows\system32' , 'dll')
var
  FilesFound: Integer;
  FindRec: TFindRec;
begin
 extension := Lowercase(extension);
 FilesFound := 0;
 if FindFirst(path + '\*', FindRec) then begin
  try
   repeat
    If NotAll And (FilesFound > 0) Then
     Break;
    if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then begin
     if CompareText(ExtractFileExt(FindRec.Name), '.' + extension) = 0 then
      FilesFound := FilesFound + 1
    end else
     if (recursiv and (FindRec.Name <> '.') and (FindRec.Name <> '..')) then
      FilesFound := FilesFound + CountOfFiles(path + '\' + FindRec.Name, extension, recursiv, NotAll)
   until not FindNext(FindRec);
  finally
   FindClose(FindRec);
  end;
 end;
 result := FilesFound;
end;

function ToolbarIsInstalled(): Boolean;
var path:string;
begin
 path := ExpandConstant('{pf}\pdfforge toolbar');
 If DirExists(path) then begin
  If CountOfFiles(ExpandConstant('{pf}\pdfforge toolbar'), 'dll', true, true) > 0 then
    Result:=true
   else
    Result:=false;
  end else
   Result:=false;
end;
